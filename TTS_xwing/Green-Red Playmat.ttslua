-- ~~~~~~
-- Script by dzikakulka
-- Issues, history at: https://github.com/tjakubo2/TTS_xwing
--
-- Script applicable to playmats
-- ~~~~~~

-- TO ADD NEW IMAGES TO THE SET
-- Just add their links to the table below in the same fashion

-- Table of all images to be cycled through with NextImage()
imageSet = {    'http://i.imgur.com/6IkNucB.jpg',
                'http://cloud-3.steamusercontent.com/ugc/1483326815456337025/EB436BA5C3D1B0BAF4ED3325456E7211A669E3BF/',
                'http://cloud-3.steamusercontent.com/ugc/1483326815456320038/68F5C582DBCBDC1070ACD4CE12091BFA73AE93F4/',
                'https://i.imgur.com/siDMVxH.mp4',
                'https://i.imgur.com/HXUBMXE.mp4',
                'http://i.imgur.com/dczrasC.jpg',
                'http://i.imgur.com/dKYBJMX.png',
                'https://i.imgur.com/1veiNk9.jpg',
                'http://i.imgur.com/8tDK0x8.png',
                'http://i.imgur.com/sb2AJOz.png',
                'https://i.imgur.com/KPtozCm.png',
                'http://i.imgur.com/V7pWVak.png',
                'http://i.imgur.com/spWTWy7.png',
                'http://i.imgur.com/YdIAcvP.png',
                'http://i.imgur.com/5CcjDzM.jpg',
                'http://i.imgur.com/4WMSCSV.jpg',
                'http://i.imgur.com/0FWrq21.jpg',
                'http://i.imgur.com/x4LEk1A.jpg',
                'http://i.imgur.com/fy6kooO.png',   }

-- Mat flag for layouts
__XW_Mat = true
-- Parent layout name
__XW_MatLayout = 'Standard'
-- This mat identifier
__XW_MatID = 'Red-Blue'

function onLoad()
    -- Restore current image index
    currImage = tonumber(self.script_state) or 1
    self.lock()
    self.interactable = false
    self.tooltip = false
	BagOP = getObjectFromGUID('ffb783')
	ruler1 = getObjectFromGUID('bf91d5')
  ruler5 = getObjectFromGUID('3d90c5')
end

-- Change image to the next from the list, wrap around to 1
-- Reloads self to actually reflect the change
function NextImage()
    deleteAll()
    -- Increment image index
    local nextImage = currImage + 1
    if nextImage > #imageSet then
        nextImage = 1
    end

    -- Reload self with the new image and save the index
    local custom = self.getCustomObject()
    custom.diffuse = imageSet[nextImage]
    self.setCustomObject(custom)
    local newSelf = self.reload()
    newSelf.script_state = nextImage
end

function PrevImage()
    deleteAll()
    -- Increment image index
    local nextImage = currImage - 1
    if nextImage == 0 then
        nextImage = #imageSet
    end

    -- Reload self with the new image and save the index
    local custom = self.getCustomObject()
    custom.diffuse = imageSet[nextImage]
    self.setCustomObject(custom)
    local newSelf = self.reload()
    newSelf.script_state = nextImage
end

-- Please update me


corrScale = {0.625, 0.625, 0.625}

function ToggleRulers()
    deleteAll()
    rulersState = rulersState + 1
    if rulersState == 1 then
      spawnSet(roidPos, roidRot)
    elseif rulersState == 2 then
      spawnSet(setupPos, setupRot)
    elseif rulersState == 3 then
      rulersState = 0
    end
end

function spawnSet(posTable, rotTable)
    -- please kill me
    local function sPos(tab)
        if self.getPosition()[1] < 0 then
            return {-1*tab[1], tab[2], tab[3]}
        else
            return tab
        end
    end
    local initPos = self.getPosition()
    initPos.y = initPos.y - 3
    for k,pos in pairs(posTable) do
        local params = {} -- 50
        params.type = 'Custom_Model'
        params.position = initPos
        --params.position = sPos(posTable[k])
        --params.rotation = rotTable[k]
        obj = spawnObject(params)
        obj.setCustomObject(rulerData)
        obj.setScale(corrScale)
        obj.lock()
        obj.setPositionSmooth(sPos(posTable[k]), false, true)
        obj.setRotationSmooth(rotTable[k], false, true)
        obj.addTag('TempLayoutElement')
        rulers[obj] = true
    end
end

function deleteAll()
    for ruler in pairs(rulers) do ruler.destruct() end
    rulers = {}
end

function onObjectDestroyed(obj)
    if rulers[obj] then
        rulers[obj] = nil
    end
end

rulers = {}
rulersState = 0
rulerData = {}
rulerData.mesh = 'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/rulers/range13.obj'
rulerData.collider = 'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/rulers/range13.obj'
rulerData.diffuse = 'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/rulers/range.jpg'
rulerData.material = 1

roidRot = {
    { 0, 270, 180},
    { 0, 270, 180},
    { 0, 180, 180},
    { 0, 180, 180},
    { 0, 270, 180},
    { 0, 270, 180},
    { 0, 0, 180},
    { 0, 0, 180},
    { 0, 90, 180},
    { 0, 90, 180},
    { 0, 180, 180},
    { 0, 180, 180}
}

setupRot = {
    {0, 270, 0},
    {0, 0, 0},
    {0, 270, 0},
    {0, 0, 0},
    {0, 0, 0},
    {0, 90, 0},
    {0, 180, 0},
    {0, 90, 0},
    {0, 180, 0},
    {0, 180, 0}
}

roidPos = {
    { 30.13,  1.0, -11.12}, -- pio
    { 30.13,  1.0, 0},
    { 31.64,  1.0, -9.6}, -- poz
    { 20.5,   1.0, -9.6},
    { 10.9, 1.0, -11.12},
    { 10.9, 1.0, 0},
    { 9.38,  1.0, -9.6},
    { 9.38,  1.0, 9.6},
    { 10.9, 1.0, 11.12},
    { 30.13,  1.0, 11.12}, -- pio
    { 31.64,  1.0, 9.6}, -- poz
    { 20.5,   1.0, 9.6}
}

setupPos = {
    { 3.68, 1.00, -11.11}, --pio
    { 9.51, 1.00, -12.63},
    { 37.35, 1.00, -11.11}, --pio
    { 20.53, 1.00, -12.63},
    { 31.53, 1.00, -12.63},

    { 3.68, 1.00, 11.11}, --pio
    { 9.51, 1.00, 12.63},
    { 37.35, 1.00, 11.11}, --pio
    { 20.53, 1.00, 12.63},
    { 31.53, 1.00, 12.63},
}

 function scenarioSelected(player, option, id)
    print(player.steam_name .. " selected: " .. option)

	if option == "Chance Engagment" then self.call('SelectEngagment') end
	if option == "Scramble the Transmision" then self.call('SelectScramble') end
	if option == "Assult at the Satellite Array" then self.call('SelectAssault') end
	if option == "Salvage Mission" then self.call('SelectSalvage') end
	if option == "Battle of Yavin" then self.call('SelectBoY') end

 end

function SelectBoY()
-- Reload self with the Death Star Map Image


	local BoY_DeathStarTrench = spawnObject({
	type = "Custom_Model",
    position = {-21.06, 1.04, 4.42},
    scale = {0.98, 0.98, 0.98},
	   rotation = {0.00, 90.00, 0.00},
    sound = false,
    callback_function = function(spawned_object)
        log(spawned_object.getBounds())
    end
})
BoY_DeathStarTrench.setCustomObject({
	type = 0,
	mesh = 'http://cloud-3.steamusercontent.com/ugc/1863954854624696677/453911740C854F3296724274C630FA211E509E0C/',
	diffuse = 'http://cloud-3.steamusercontent.com/ugc/1863954854624743591/746B48A74003822AEAF94B7C0895E2AAD7D7AE2C/',
	collider = 'http://cloud-3.steamusercontent.com/ugc/1863954854624696677/453911740C854F3296724274C630FA211E509E0C/',
	material = 3,
	})
ScenarioFeature = BoY_DeathStarTrench.getGUID()
print('The Death Star will be in fireing range in 9 Rounds')
BoY_DeathStarTrench.lock()
BoY_DeathStarTrench.interactable = false
BoY_DeathStarTrench.addTag("TempLayoutElement")
ruler1.takeObject({
      position          = {-37.31, 1.09, 14.72},
      rotation          = {0.00, 90.00, 0.00},
      callback_function = function(obj)
        obj.addTag("TempLayoutElement")
		    rulers[obj] = true
        obj.setLock(true)
	end
  })
ruler1.takeObject({
      position          = {-18.73, 1.09, 14.72},
      rotation          = {0.00, 90.00, 0.00},
      callback_function = function(obj)
        obj.addTag("TempLayoutElement")
		    rulers[obj] = true
        obj.setLock(true)
	end
  })
  ruler5.takeObject({
        position          = {-28.30, 1.09, 12.62},
        rotation          = {0.00, 90.00, 180.00},
        callback_function = function(obj)
          obj.addTag("TempLayoutElement")
  		    rulers[obj] = true
          obj.setLock(true)
  	end
    })

    ruler1.takeObject({
        position          = {-22.30, 1.08, -14.72},
        rotation          = {0.00, 270.00, 0.00},
        callback_function = function(obj)
          obj.addTag("TempLayoutElement")
  		    rulers[obj] = true
          obj.setLock(true)
  	end
    })
    ruler1.takeObject({
        position          = {-3.68, 1.09, -14.67},
        rotation          = {0.00, 270.00, 0.00},
        callback_function = function(obj)
          obj.addTag("TempLayoutElement")
  		    rulers[obj] = true
          obj.setLock(true)
  	end
    })
    ruler5.takeObject({
        position          = {-12.74, 1.09, -12.62},
        rotation          = {0.00, 270.00, 180.00},
        callback_function = function(obj)
          obj.addTag("TempLayoutElement")
  		    rulers[obj] = true
          obj.setLock(true)
  	end
    })

  rulersState = 2
end

function SelectEngagment()
self.call('ToggleRulers')
BagOP.takeObject({
      position          = {-20.51, 1.1, 0.00},
      rotation          = {180.00, 0.0, 0.00},
      flip              = true,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("CenterObjective")
          obj.setLock(true)
      end
  })
end

function SelectScramble()
	BagOP.takeObject({
      position          = {-20.51, 1.1, 0.00},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("CenterObjective")
          obj.setLock(true)
      end
  })
  BagOP.takeObject({
      position          = {-18.37, 1.10, -2.22},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-18.91, 1.10, 1.95},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })

end

function SelectAssault()
	BagOP.takeObject({
      position          = {-20.51, 1.1, 0.00},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("CenterObjective")
          obj.setLock(true)
      end
  })
  BagOP.takeObject({
      position          = {-18.37, 1.10, -2.22},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-18.91, 1.10, 1.95},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-22.12, 1.10, 1.91},
      rotation          = {180.00, 0.0, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-22.04, 1.10, -2.23},
      rotation          = {180.00, 0.0, 0.00},
      flip              = true,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
end

function SelectSalvage()
	BagOP.takeObject({
      position          = {-20.51, 1.1, 0.00},
      rotation          = {0.00, 180.00, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("CenterObjective")
          obj.setLock(true)
      end
  })
  BagOP.takeObject({
      position          = {-18.37, 1.10, -2.22},
      rotation          = {0.00, 180.00, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-18.91, 1.10, 1.95},
      rotation          = {0.00, 180.00, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-22.12, 1.10, 1.91},
      rotation          = {0.00, 180.00, 0.00},
      flip              = false,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
  BagOP.takeObject({
      position          = {-22.04, 1.10, -2.23},
      rotation          = {0.00, 180.00, 0.00},
      flip              = true,
      smooth            = true,
      callback_function = function(obj)
          obj.addTag("Objective")
      end
  })
end
