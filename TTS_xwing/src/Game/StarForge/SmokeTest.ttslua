require("TTS_lib.Util.Table")
Sequence = require("TTS_xwing.src.Test.Sequence")
ButtonTest = require("TTS_xwing.src.Test.ButtonTest")

local SmokeTest = {}

SmokeTest.runSmokeTest = function()
    printToAll("Starting Smoke Test...", { 0, 1, 0 })

    local blueInfo = getPlayerHandZoneInfo(Player["Blue"])
    local redInfo = getPlayerHandZoneInfo(Player["Red"])
    local yellowInfo = getPlayerHandZoneInfo(Player["Yellow"])
    local brownInfo = getPlayerHandZoneInfo(Player["Brown"])

    local seq = Sequence:new()

    SmokeTest.spawnImperialShips(seq, Color.Blue, blueInfo.position, blueInfo.rotationOffset)
    SmokeTest.spawnRebelShips(seq, Color.Red, redInfo.position, redInfo.rotationOffset)

    seq:start()

    printToAll("Smoke Test Completed.", { 0, 1, 0 })
end

function SmokeTest.spawnImperialShips(seq, player_color, targetPosition, rotDegrees)
    local dataPad = getObjectFromGUID("a4dbbf")
    if dataPad == nil then
        printToAll("Didn't find DataPad", { 0, 1, 0 })
        return
    end

    seq:add(ButtonTest.Click, dataPad, 'Builder', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Imperial', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Add Ship', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'TIE/ln Fighter', player_color, false)
    seq:add(ButtonTest.Click, dataPad, '"Howlrunner"%s*%(%d+%)', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Add Ship', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'TIE Advanced x1', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Darth Vader%s*%(%d+%)', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Spawn List', player_color, false)
    seq:add(waitAndMove, targetPosition, rotDegrees, 120)
    seq:add(function(seq)
        Wait.frames(function()
            dropDials(seq)
        end, 120)
    end)
end

function SmokeTest.spawnRebelShips(seq, player_color, targetPosition, rotDegrees)
    local dataPad = getObjectFromGUID("a4dbbf")
    if dataPad == nil then
        printToAll("Didn't find DataPad", { 0, 1, 0 })
        return
    end

    seq:add(ButtonTest.Click, dataPad, 'Builder', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Rebel', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Add Ship', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Y%-Wing', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Gray Squadron Bomber%s*%(%d+%)', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Add Ship', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'X%-Wing', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Luke Skywalker%sRed Five%s*%(%d+%)', player_color, false)
    seq:add(ButtonTest.Click, dataPad, 'Spawn List', player_color, false)
    seq:add(waitAndMove, targetPosition, rotDegrees, 120)
end

-- Utility function to get player hand zone info
function getPlayerHandZoneInfo(player)
    local handTransform = player.getHandTransform()
    local position = handTransform.position + handTransform.forward * 19
    local rotationOffset = getRotationOffset(handTransform.forward)
    return {
        position = position,
        rotationOffset = rotationOffset
    }
end

-- Function to calculate the rotation offset based on the forward vector
function getRotationOffset(forwardVector)
    local worldForward = Vector(0, 0, 1)
    local dotProduct = forwardVector:dot(worldForward)
    local angle = math.deg(math.acos(dotProduct))

    -- Determine the sign of the angle based on the cross product
    local crossProduct = forwardVector:cross(worldForward)
    if crossProduct.y < 0 then
        angle = -angle
    end

    return angle - 90
end

-- Helper function to perform movement after a delay
function waitAndMove(seq, targetPosition, rotDegrees, delay)
    Wait.frames(function()
        movement(targetPosition, rotDegrees)
        seq:next()
    end, delay)
end

dropDials = function(seq)
    printToAll("dropDials:")
    seq = seq or Sequence.NoSeq()
    local toShip = { 0, 5, -3 }
    for _, obj in ipairs(getObjects()) do
        if obj.getName() == "Unassigned Dial" then
            obj.translate(toShip)
            local color, name = Color.Blue
            obj.call("onDrop", { name })
        end
    end
    Wait.frames(function()
        printToAll("Done waiting")
        seq:next()
    end, 120)
end

-- Function to calculate the centroid of a group of objects
function calculateCentroid(objects)
    local sum = Vector(0, 0, 0)
    for _, obj in ipairs(objects) do
        sum = sum + obj.getPosition()
    end
    return sum:scale(1.0 / #objects)
end

-- Function to rotate a point around the Y-axis by a given angle
function rotatePointAroundY(point, origin, angle)
    local rad = math.rad(angle)
    local cos = math.cos(rad)
    local sin = math.sin(rad)
    local relativePos = point - origin

    local rotatedPos = Vector(
        cos * relativePos.x - sin * relativePos.z,
        point.y,
        sin * relativePos.x + cos * relativePos.z
    ) + origin

    return rotatedPos
end

-- Function to move and rotate objects relative to a reference point
function moveAndRotateGroup(objects, target, rotationOffset)
    if #objects == 0 then
        return
    end

    local centroid = calculateCentroid(objects)

    for _, obj in ipairs(objects) do
        -- Rotate the object around the centroid
        local pos = obj.getPosition()
        local rotatedPos = rotatePointAroundY(pos, centroid, rotationOffset)

        -- Calculate the new position relative to the target
        local newPos = target + (rotatedPos - centroid)

        obj.setPositionSmooth(newPos)

        -- Adjust the rotation based on the centroid and rotationOffset
        local rot = obj.getRotation()
        local newRot = {
            x = rot.x,
            y = 180 - rot.y - rotationOffset,
            z = rot.z,
        }
        obj.setRotationSmooth(newRot, false, false)
    end
end

-- Function to handle the movement and rotation of objects
function movement(targetPosition, rotationOffset)
    -- Define the box for Physics.cast
    local box = {
        origin = Vector(-64.00, 0.0, -30.00), -- Start below the objects
        direction = Vector(0, 0, 1),          -- Move in the positive z-direction
        type = 3,
        size = Vector(13, 10, 5),             -- Extend in the x, y, and z dimensions
        orientation = Vector(0, 0, 0),
        max_distance = 30,
        debug = true,
    }

    -- Perform the cast
    local castResult = Physics.cast(box)

    -- Filter out moveable objects
    local newObjects = {}
    for _, hit_result in ipairs(castResult) do
        local obj = hit_result.hit_object
        if obj.locked == false and obj.interactable == true then
            table.insert(newObjects, obj)
        end
    end

    -- Apply move and rotate to all new objects as a group
    moveAndRotateGroup(newObjects, targetPosition, rotationOffset)
end

return SmokeTest
