-- This is the Star Forge!
-- It will make what ever you desire!

-- StarForge.ttslua

require("TTS_lib.Util.Table")

if not self.hasTag("Star Forge") then
    printToAll("Only the Star Forge itself should run this script.")
    return
else
    printToAll("Star Forge is active and online!", Color.Orange)
end

--[[
## Star Forge

Utility Object to aid in Game Mod Script Updates. Locating and "sourcing" Objects.
- This should replace the Accessories Bag or at least provide a Facade in front of it
- Extract and layout out all scripted objects
    - Possibly be sensitive to HotAC vs Standard Layout
    - Reset each script back to itself to force an update.
    - Will need to keep track of where each object came from to survive a save and reload.
        1. Layout all scripted objects
            a. Range sensitive objects may be better placed > Range-1 from each other
        2. Save the Game
        3. Load the Game
        4. Push all scripts
        5. Reset bags and replace objects
- Assess each Container as a possible source of objects.
    - Point out when there are duplicate sources for an object.
    - Front all containers/dispensers as a registry for objects
    - Not all Bags have names
    - Not all Objects in Bags have names
    - Multi-State Objects need
        - each of their names and
        - a way to recognize which one to morph to
    - names may include: Bag name, Object Contents name, or NickName
]]
local StarForge = {
    factories = {}
}

StarForge.initialize = function()
    StarForge.factories = {}
end

function onLoad(save_data)
    -- self.setLock(true)
    -- self.unregisterCollisions()
    addContextMenus()
end

function addContextMenus()
    self.addContextMenuItem("Factory Search", UpdateFactories)
    self.addContextMenuItem("List Factories", ListFactories)
    self.addContextMenuItem("Find Duplicates", FindDuplicates)
end

StarForge.RegisterFactory = function(factory, product)
    local previousFactory = StarForge.factories[product]
    StarForge.factories[product] = factory
    return previousFactory
end

ListFactories = function()
    printToAll("StarForge: List Factories")
    if not StarForge.factories or next(StarForge.factories) == nil then
        printToAll("StarForge: no Factories registered")
        return
    end
    printToAll("StarForge Factories:")
    for object, factory in pairs(StarForge.factories) do
        printToAll("a function named: " .. factory.funcName)
        factory.func(object)
    end
    printToAll("End Factories:")
end

--[[
## Update Factories
Scan all game objects
- if it's an Infinite Bag,
    find out of what and register the object in the bag.
- if it's an Mixed Bag,
    find out of what and register the objects in the bag.
- if the Objects are Multi-state,
 consider registering each state with a "<key>.#".

 ### Useful Info
type: An Int representing the Object's type.
Optional, defaults to 0.
- 0: Generic
- 1: Figurine
- 2: Dice
- 3: Coin
- 4: Board
- 5: Chip
- 6: Bag
- 7: Infinite bag
]]

function NoOp(obj)
end

function handlers()
    local typeHandlers = {
        Generic = noop,
        Figurine = noop,
        Dice = noop,
        Coin = noop,
        Board = noop,
        Chip = noop,
        Bag = noop,
        Infinite = noop,
    }
    return typeHandlers
end

UpdateFactories = function()
    printToAll("Update Factories")
    local everything = getObjects()
    for _, object in ipairs(everything) do
        local product = object.getName()
        local objType = object.type
        if objType == "Infinite" then
            local products = extractProducts(object)
            local factory = factory(object, printInfiniteBag, 'printInfiniteBag')
            -- StarForge.factories[next(products)] = factory
        end
        if objType == "Bag" then
            local factory = factory(object, printBag, 'printBag')
            StarForge.factories[product] = factory
        end
    end
    printToAll("Update Factories Done")
end

function factory(dispenser, func, funcName)
    local factory = {}
    factory.dispenser = dispenser
    factory.func = printInfiniteBag
    factory.funcName = 'printInfiniteBag'
    return factory
end

function extractProducts(dispenser)
    local names = {}
    local call_back = function(obj)
        print(tostring(obj))
        table.insert(names, "dispenser: " .. tostring(dispenser.getName()))
        table.insert(names, "name: " .. tostring(obj.getName()))
    end
    local position = { 0, 2, 0 }
    interrogateContainer(dispenser, position, call_back)
    return names
end

function interrogateContainer(dispenser, position, callback)
    dispenser.takeObject({
        -- guid = itemGuid,
        smooth = true,
        position = position,
        callback_function = function(obj)
            -- Handle the object after it's taken from the bag
            -- if dispenser.type == "InfiniteBag" then
            callback(obj)
            -- else
            --     local clone = obj.clone({ position = position })     -- Clone it to the desired position
            --     factory.putObject(obj)                               -- Put the original back into the bag
            --     if callback then
            -- callback(clone)
            --     end
            -- end
        end
    })
end

function printInfiniteBag(obj)
    printToAll(tostring(obj) .. " is a Infinite Bag", Color.Green)
end

function printBag(obj)
    printToAll(tostring(obj) .. " is a Bag", Color.Yellow)
end

-- Method to get an object from a factory (Bag or InfiniteBag)
function StarForge.getObjectFromFactory(factoryName, objectName, position, callback)
    local factory = self.getFactory(factoryName)
    if not factory then
        print("Factory not found: " .. factoryName)
        return
    end

    local items = factory.getObjects() -- Retrieve a list of all items in the bag
    local itemGuid = nil               -- This will store the GUID of the requested object

    -- Search through the items to find the requested object
    for _, item in ipairs(items) do
        if item.name == objectName then
            itemGuid = item.guid
            break
        end
    end

    if itemGuid then
        factory.takeObject({
            guid = itemGuid,
            smooth = true,
            position = position,
            callback_function = function(obj)
                -- Handle the object after it's taken from the bag
                if factory.type == "InfiniteBag" then
                    obj.setPosition(position)
                else
                    local clone = obj.clone({ position = position }) -- Clone it to the desired position
                    factory.putObject(obj)                           -- Put the original back into the bag
                    if callback then
                        callback(clone)
                    end
                end
            end
        })
    else
        print("Object not found in factory: " .. objectName)
    end
end

function StarForge.createObject(name, options)
    options = options or {}
    local bag = StarForge.factories[name]
    if bag then
        local params = {
            position = options.position or (bag.getPosition() + Vector(0, 2, 0)),
            rotation = options.rotation,
            smooth = options.smooth or false,
            callback_function = options.callback_function
        }
        local obj = bag.takeObject(params)
        if options.clone then
            return obj.clone({ position = params.position })
        else
            return obj
        end
    else
        print("Error: No registered factory with name: " .. name)
        return nil
    end
end

-- Utility function to check if a table contains a value
function tableContains(tbl, value)
    for _, v in pairs(tbl) do
        if v == value then
            return true
        end
    end
    return false
end

function layoutObjects()
    local items = self.getObjects()
    local position = self.getPosition()

    position.x = position.x + 10
    position.z = position.z - 15
    local count = 0

    for i = #items, 1, -1 do
        local item = items[i]
        if item.lua_script ~= "" then
            count = count + 1
            local spreadPos = {
                x = position.x + math.floor(count / 3) * 3.5,
                y = position.y + 1,
                z = position.z + (count % 3) * 3
            }

            self.takeObject({
                position = spreadPos,
                index = i - 1, -- Adjust index to current position in the array
                smooth = false
            })
        end
    end
end

function FindDuplicates()
    printToAll("Find Duplicates")
    local everything = getObjects()
    for _, object in ipairs(everything) do
        local product = object.getName()
        local objType = object.type
        if objType == "Infinite" then
            local products = extractProducts(object)
            local factory = factory(object, printInfiniteBag, 'printInfiniteBag')
        end
        if objType == "Bag" then
            local factory = factory(object, printBag, 'printBag')
            StarForge.factories[product] = factory
        end
    end
    printToAll("Update Factories Done")
end
