ship_drop_positions =
{
  small = {
    right = {pos = vector(-20,0,0), rot = 90},
    left = {pos = vector(20,0,0), rot = -90} ,
    back = {pos = vector(0,20,0), rot = 180}},
  medium = {
    right = {pos = vector(-30,0,0), rot = 90},
    left = {pos = vector(30,0,0), rot = -90} ,
    back = {pos = vector(0,30,0), rot = 180}},
  large = {
    right = {pos = vector(-40,0,0), rot = 90},
    left ={pos = vector(40,0,0), rot = -90} ,
    back = {pos = vector(0,40,0), rot = 180}},
  huge = {
    right = {pos = vector(-40,0,0), rot = 90},
    left = {pos = vector(40,0,0), rot = -90} ,
    back = {pos = vector(0,80,0), rot = 180}},
}


backwards = false
droporigin = nil
dropped = false
stat = false
side = "(A)"

function onLoad(save_state)
    local state = JSON.decode(save_state)
    if state then

    end
    SetupContextMenu()
end

function onSave()
end

function SetupContextMenu()
  self.clearContextMenu()

end

scale = 1/self.getScale().x
checkingRange = nil

local removeButtonUp = {
    click_function = 'removeCheckRange',
    label = 'Remove',
    function_owner = self,
    position = {0, 0.1*scale, 0.0},
    rotation = {0, 0, 0},
    width = 400*scale,
    height = 300*scale,
    font_size = 100*scale,
    color = {0.7, 0.7, 0.7}
}

local removeButtonDown = {
    click_function = 'removeCheckRange',
    label = 'Remove',
    function_owner = self,
    position = {0, -0.1*scale, 0.0},
    rotation = {180, 180, 0},
    width = 400*scale,
    height = 300*scale,
    font_size = 100*scale,
    color = {0.7, 0.7, 0.7}
}


function removeCheckRange()
  checkRange(nil)
end

function checkRange(range)
  for _,p in ipairs(Player.getPlayers() or {}) do
    self.removeFromPlayerSelection(p.color)
  end

  if range and checkingRange ~= range then
    printToAll("Checking for ships within range ".. range .. " of " .. self.getName(), color(1.0,1.0,0))
    vector_lines = {}
    local side_offset = vector(0,0.01,0)
    if self.is_face_down then
      side_offset = side_offset * -1
    end
    for k,obj in pairs(getObjectsWithAnyTags({'Ship'})) do
        my_pos = self.getNearestPointFromObject(obj)
        closest = Global.call("API_GetClosestPointToShip", {ship=obj,point=my_pos})
        distance = Convert_igu_mm(closest.length)
        if distance < 100*range then
            printToAll(obj.getName() .. " is within range ".. range .. " of ".. self.getName(), color(1.0,1.0,0))
            table.insert(vector_lines, {
                points = {self.positionToLocal(closest.A) +side_offset , self.positionToLocal(closest.B) + side_offset},
                color = {1,1,1},
                thickness = 0.05*scale,
                rotation = vector(0,0,0)
            })
        end
    end
    self.clearButtons()
    self.setVectorLines(vector_lines)
    if #vector_lines > 0 then
      checkingRange = range
      if self.is_face_down then
        self.createButton(removeButtonDown)
      else
        self.createButton(removeButtonUp)
      end
    else
      checkingRange = nil
      printToAll("No ships is within range ".. range .." of " .. self.getName(), color(1.0,1.0,0))
    end
  else
    checkingRange = nil
    self.clearButtons()
    self.setVectorLines({})
  end
end

function onDropped(playerColor)
    local spos = self.getPosition()
    local nearest = nil
    local nearest_loc = nil
    local nearest_pos = nil
    local minDist = 2.89
    droporigin = self.getPosition() -- 80mm
    for k,ship in pairs(getObjectsWithTag('Ship')) do
        local pos = ship.getPosition()
        for loc, pos_rot in pairs(ship_drop_positions[ship.getTable('Data').Size or "small"]) do
          local drop_pos = pos + Convert_mm_igu(ship.getTransformRight()*pos_rot.pos.x) + Convert_mm_igu(ship.getTransformForward()*pos_rot.pos.y)
          local dist = math.sqrt(math.pow((spos[1]-drop_pos[1]),2) + math.pow((spos[3]-drop_pos[3]),2))
          if dist < minDist then
              nearest = ship
              nearest_loc = pos_rot
              nearest_pos = drop_pos
              minDist = dist
              --print("Closer pos: " .. loc .. " dist: " .. tostring(dist))
          end
        end

    end
    if nearest ~= nil then
        side = "(B)"
        if self.is_face_down then
          side = "(A)"
        end
        printToAll('Mandalorian Commandos ' .. side .. ' ready to drop', color(1.0,1.0,0))
        local side_offset = vector(0,0.05,0)
        if self.is_face_down then
          side_offset = side_offset * -1
        end


        backwards =  math.abs(math.fmod((self.getRotation().y + 90) - (nearest.getRotation().y + nearest_loc.rot),360)) < 90

        local drop_rot = nearest.getRotation() + vector(0,nearest_loc.rot + 90,0)
        if backwards then
          drop_rot = drop_rot + vector(0,180,0)
        end
        if self.is_face_down then
          drop_rot = drop_rot + vector(0,0,180)
        end

        self.setPositionSmooth(nearest_pos + vector(0,0.25,0), false, false)
        self.setRotationSmooth(drop_rot, false, false)
        self.setLock(true)

        droploc = nearest_loc
        dropvector = nearest.getTransformForward():rotateOver("y",nearest_loc.rot)

        showDropButtons()

    end
end

function onContextOpen(player_color)
    showBtn()
end

function showBtn()
    if stat==false and dropped then
        if self.is_face_down then
            self.UI.setAttribute("btnPanel", "rotation", "180 0 180")
            self.UI.setAttribute("btnPanel", "position", "0 0 3")
        else
            self.UI.setAttribute("btnPanel", "rotation", "0 0 180")
            self.UI.setAttribute("btnPanel", "position", "0 0 -3")
        end
        self.UI.show("btnPanel")
        stat=true
    end
end

function hideBtn()
    if stat==true then
        self.UI.hide("btnPanel")
        stat=false
    end
end

moves = {
  Left = vector(1.81,0,1.81),
  Straight = vector(4,0,0),
  Right = vector(1.81,0,-1.81)
}

rotation = {
  Left = vector(0,-90,0),
  Straight = vector(0,0,0),
  Right = vector(0,90,0),
}

function relocate(P, option, id)
    local forward = self.getTransformRight()
    local right = self.getTransformForward()
    local up = self.getTransformUp()
    if self.is_face_down then
      up = -1*up
      right = -1*right
    end

    local movePos = moves[id]
    local pos = self.getPosition() + forward*movePos.x + right*movePos.z
    Global.call("API_ClearPosition", {pos = pos, reach = 0.5})
    self.setPositionSmooth(pos, false, false)
    self.setRotationSmooth(self.getRotation() + rotation[id], false, false)
    printToAll('Mandalorian Commandos '..side ..  ' relocated ' .. id, color(1.0,1.0,0))

end

function onPickUp(playerColor)
  local color = Color.fromString(playerColor)
  color.a = 0.5
  dropped = false
  self.setColorTint(color)
end

function showDropButtons()
  self.clearButtons()
  local rotation = vector(0,-90,0)
  local forward = vector(-1,0,0)
  local right = vector(0,0,1)
  local up = vector(0,1,0)
  if backwards then
    forward = forward*-1
    right = right*-1
    rotation = rotation + vector(0,180,0)
  end
  if self.is_face_down then
    up = -1*up
    forward = forward*-1
    rotation = rotation + vector(0,0,180)
  end


  local raise = 0.03*up

  self.createButton({
    click_function = "dropL",
    function_owner = self,
    label          = "^",
    position       = -0.2*right + raise + 0.3*forward,
    rotation       = vector(0,45,0) + rotation,
    width          = 60,
    height         = 60,
    font_size      = 40
  })
  self.createButton({
    click_function = "dropS",
    function_owner = self,
    label          = "^",
    position       = raise + 0.3*forward,
    rotation       = rotation,
    width          = 60,
    height         = 60,
    font_size      = 40
  })
  self.createButton({
    click_function = "dropR",
    function_owner = self,
    label          = "^",
    position       = 0.2*right + raise + 0.3*forward,
    rotation       = vector(0,-45,0) + rotation,
    width          = 60,
    height         = 60,
    font_size      = 40
  })
  self.createButton({
    click_function = "cancelDrop",
    function_owner = self,
    label          = "Cancel",
    position       = raise + 0.05*forward,
    rotation       = rotation,
    width          = 150,
    height         = 100,
    font_size      = 40
  })
end

function cancelDrop()
  self.setPositionSmooth(droporigin, false, false)
  self.setLock(false)
  self.clearButtons()
end

function dropL()
  printToAll('Mandalorian Commandos '..side ..  ' dropped using a left bank template', color(1.0,1.0,0))
  drop(vector(2.44,0,-1.24), vector(0,45,0))
end
function dropR()
  printToAll('Mandalorian Commandos '..side ..  ' dropped using a right bank template', color(1.0,1.0,0))
  drop(vector(2.44,0,1.24), vector(0,-45,0))
end
function dropS()
  printToAll('Mandalorian Commandos '..side ..  ' dropped using a straight template', color(1.0,1.0,0))
  drop(vector(2,0,0), vector(0,0,0))
end

function drop(position, rotation)
  local forward = self.getTransformRight()
  local right = self.getTransformForward()
  local up = self.getTransformUp()
  local upOffset = up*0.30
  if backwards then
    forward = forward*-1
    right = right*-1
  end
  if self.is_face_down then
    up = -1*up
    forward = forward*-1
    upOffset = up*0.2
  end
  local pos = self.getPosition() + forward*position.x - upOffset + right*position.z
  self.setRotationSmooth(self.getRotation() + rotation, false, false)
  Global.call("API_ClearPosition", {pos = pos, reach = 0.5})
  self.setPositionSmooth(pos, false, false)
  self.clearButtons()
  dropped = true
end
