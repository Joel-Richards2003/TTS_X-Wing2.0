-- ~~~~~~
-- Script by Eirik 'Flippster' Munthe
--
-- ~~~~~~

local Dim = require("TTS_xwing.src.Dim")

-- Call bomb drop stick
function onDropped()
    Global.call('API_BombTokenDrop', { token = self })
end

local spawnedRuler = nil
function update()
    if self.getDescription() == 'r' then
        if ToggleRuler() then
            printToAll('Spawning ' .. self.getName() .. ' guide', { 0, 1, 1 })
        end
        self.setDescription('')
    end
end

function ToggleRuler()
    if spawnedRuler then
        spawnedRuler.destruct()
        spawnedRuler = nil
        return false
    end
    local params = {
        type = 'Custom_Model',
        position = self.positionToWorld({ 0, 0.4, 0 }),
        rotation = self.getRotation(),
        scale = self.getScale()
    }
    local custom = {
        mesh =
        'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/arcranges/new/bomb_range_1.obj',
        collider =
        'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/colliders/minicollider.obj'
    }
    local removeButton = {
        click_function = 'ToggleRuler',
        label = 'DEL',
        function_owner = self,
        position = { 0, 0.1, 0 },
        rotation = { 0, 270, 0 },
        width = 750,
        height = 750,
        font_size = 250,
        color = { 0.7, 0.7, 0.7 }
    }
    spawnedRuler = spawnObject(params)
    spawnedRuler.setCustomObject(custom)
    spawnedRuler.setColorTint(color(1, 1, 0, 0.2))
    vector_lines = {}
    for k, obj in pairs(getAllObjects()) do
        if obj ~= nil and obj.type == 'Figurine' and obj.getVar('__XW_Ship') == true then
            my_pos = self.getNearestPointFromObject(obj)
            
            
            closest = Global.call('API_GetClosestPointToShip', { ship = obj, point = my_pos })
            distance = Dim.Convert_igu_mm(closest.length)
            if distance < 100 then
                table.insert(vector_lines, {
                    points = { self.positionToLocal(closest.A), self.positionToLocal(closest.B) },
                    color = { 1, 1, 1 },
                    thickness = 0.1,
                    rotation = vector(0, 0, 0)
                })
            end
        end
    end
    spawnedRuler.setVectorLines(vector_lines)
    spawnedRuler.createButton(removeButton)
    spawnedRuler.lock()
    return true
end

clusterScript = [[
local Dim = require("TTS_xwing.src.Dim")

checkingRange = nil
scale = 1/self.getScale().x

local removeButtonUp = {
    click_function = 'removeCheckRange',
    label = 'Remove',
    function_owner = self,
    position = {0, 0.1*scale, 0},
    rotation = {0, 0, 0},
    width = 400*scale,
    height = 300*scale,
    font_size = 100*scale,
    color = {0.7, 0.7, 0.7}
}

local removeButtonDown = {
    click_function = 'removeCheckRange',
    label = 'Remove',
    function_owner = self,
    position = {0, -0.1*scale, 0},
    rotation = {180, 0, 0},
    width = 400*scale,
    height = 300*scale,
    font_size = 100*scale,
    color = {0.7, 0.7, 0.7}
}

function removeCheckRange()
  checkRange(nil)
end

function onLoad(save_state)
    self.addContextMenuItem("Check Range 1", function() checkRange(1) end, false)
end

function checkRange(range)
    if range and checkingRange ~= range then
      printToAll("Checking for ships within range ".. range .. " of " .. self.getName(), color(1.0,1.0,0))
      vector_lines = {}
      for k,obj in pairs(getObjectsWithAnyTags({'Ship'})) do
          my_pos = self.getNearestPointFromObject(obj)
          closest = Global.call("API_GetClosestPointToShip", {ship=obj,point=my_pos})
          distance = Dim.Convert_igu_mm(closest.length)
          if distance < 100*range then
              printToAll(obj.getName() .. " is within range ".. range .. " of ".. self.getName(), color(1.0,1.0,0))
              table.insert(vector_lines, {
                  points = {self.positionToLocal(closest.A), self.positionToLocal(closest.B)},
                  color = {1,1,1},
                  thickness = 0.05*scale,
                  rotation = vector(0,0,0)
              })
          end
      end
      self.clearButtons()
      self.setVectorLines(vector_lines)
      if #vector_lines > 0 then
        checkingRange = range
        if self.is_face_down then
          self.createButton(removeButtonDown)
        else
          self.createButton(removeButtonUp)
        end
      else
        checkingRange = nil
        printToAll("No ships is within range ".. range .." of " .. self.getName(), color(1.0,1.0,0))
      end
    else
      checkingRange = nil
      self.clearButtons()
      self.setVectorLines({})
    end
end
]]

SpawnBlaze = function()
    local tParams = { type = 'Custom_Model' }
    local tCustom = {
        mesh =
        'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/tokens/devices/proximity.obj',
        diffuse =
        'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/tokens/devices/blaze.png',
        collider =
        'https://raw.githubusercontent.com/JohnnyCheese/TTS_X-Wing2.0/master/assets/Items/tokens/devices/proximity-col.obj',
        convex = true,
        material = 3,
        type = 0
    }

    local t1 = spawnObject(tParams)
    t1.setCustomObject(tCustom)
    t1.lock()
    t1.setPositionSmooth(self.getPosition() - Dim.Convert_mm_igu(53) * self.getTransformRight(), false, true)
    t1.setRotationSmooth(self.getRotation(), false, true)
    t1.setScale({ 0.38, 0.38, 0.38 })
    t1.setName('Blaze')
    t1.addTag('Mine')
    t1.addTag('Obstacle')
    t1.setLuaScript(clusterScript)
    Global.call("API_MineDrop", { mine = t1 })
    fuseBag = getObjectFromGUID('568727')
    fuseBag.takeObject({
        position = self.getPosition() - Dim.Convert_mm_igu(53) * self.getTransformRight() + vector(0, 1, 0),
        smooth   = true,
    })
end



function onLoad()
    if self.getName() == 'AoE Bomb source' then
        self.setPosition({ 0, -3, 18.28 })
        self.setRotation({ 0, 0, 0 })
        self.lock()
        self.tooltip = false
        self.interactable = false
        update = nil
    else
        self.addContextMenuItem("Toggle Range 1", ToggleRuler, false)
        self.addContextMenuItem("Place Blaze", SpawnBlaze, false)
    end
end
